// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/listen-lavender/goseq/model (interfaces: SeqDao)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSeqDao is a mock of SeqDao interface
type MockSeqDao struct {
	ctrl     *gomock.Controller
	recorder *MockSeqDaoMockRecorder
}

// MockSeqDaoMockRecorder is the mock recorder for MockSeqDao
type MockSeqDaoMockRecorder struct {
	mock *MockSeqDao
}

// NewMockSeqDao creates a new mock instance
func NewMockSeqDao(ctrl *gomock.Controller) *MockSeqDao {
	mock := &MockSeqDao{ctrl: ctrl}
	mock.recorder = &MockSeqDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSeqDao) EXPECT() *MockSeqDaoMockRecorder {
	return m.recorder
}

// AtomicInc mocks base method
func (m *MockSeqDao) AtomicInc(arg0 context.Context, arg1 string) uint64 {
	ret := m.ctrl.Call(m, "AtomicInc", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// AtomicInc indicates an expected call of AtomicInc
func (mr *MockSeqDaoMockRecorder) AtomicInc(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtomicInc", reflect.TypeOf((*MockSeqDao)(nil).AtomicInc), arg0, arg1)
}
