// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/listen-lavender/goseq/model (interfaces: HardRegionDao)

// Package mock is a generated GoMock package.
package mock

import (
	model "github.com/listen-lavender/goseq/model"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHardRegionDao is a mock of HardRegionDao interface
type MockHardRegionDao struct {
	ctrl     *gomock.Controller
	recorder *MockHardRegionDaoMockRecorder
}

// MockHardRegionDaoMockRecorder is the mock recorder for MockHardRegionDao
type MockHardRegionDaoMockRecorder struct {
	mock *MockHardRegionDao
}

// NewMockHardRegionDao creates a new mock instance
func NewMockHardRegionDao(ctrl *gomock.Controller) *MockHardRegionDao {
	mock := &MockHardRegionDao{ctrl: ctrl}
	mock.recorder = &MockHardRegionDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHardRegionDao) EXPECT() *MockHardRegionDaoMockRecorder {
	return m.recorder
}

// AtomicAdd mocks base method
func (m *MockHardRegionDao) AtomicAdd(arg0 context.Context, arg1 *model.HardRegion) (*model.HardRegion, error) {
	ret := m.ctrl.Call(m, "AtomicAdd", arg0, arg1)
	ret0, _ := ret[0].(*model.HardRegion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AtomicAdd indicates an expected call of AtomicAdd
func (mr *MockHardRegionDaoMockRecorder) AtomicAdd(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtomicAdd", reflect.TypeOf((*MockHardRegionDao)(nil).AtomicAdd), arg0, arg1)
}

// Find mocks base method
func (m *MockHardRegionDao) Find(arg0 context.Context, arg1 uint64, arg2 int, arg3 string, arg4 []*model.HardRegion, arg5 func(*model.HardRegion) bool) ([]*model.HardRegion, error) {
	ret := m.ctrl.Call(m, "Find", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]*model.HardRegion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockHardRegionDaoMockRecorder) Find(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockHardRegionDao)(nil).Find), arg0, arg1, arg2, arg3, arg4, arg5)
}

// FindByID mocks base method
func (m *MockHardRegionDao) FindByID(arg0 context.Context, arg1 string) (*model.HardRegion, error) {
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*model.HardRegion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockHardRegionDaoMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockHardRegionDao)(nil).FindByID), arg0, arg1)
}

// StoreID mocks base method
func (m *MockHardRegionDao) StoreID() string {
	ret := m.ctrl.Call(m, "StoreID")
	ret0, _ := ret[0].(string)
	return ret0
}

// StoreID indicates an expected call of StoreID
func (mr *MockHardRegionDaoMockRecorder) StoreID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreID", reflect.TypeOf((*MockHardRegionDao)(nil).StoreID))
}
